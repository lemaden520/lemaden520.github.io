<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>C语言动态数组分配算法演示</title>
      <link href="/2018/11/03/c-dong-tai-nei-cun-fen-pei/"/>
      <url>/2018/11/03/c-dong-tai-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<h1 id="C动态数组算法演示"><a href="#C动态数组算法演示" class="headerlink" title="C动态数组算法演示"></a>C动态数组算法演示</h1><blockquote><p><strong>摘要：</strong>数据结构和算法对于编程的意义不言而喻，具有指导意义的。无论从事算法优化方向研究，还是大数据处理，亦或者网站开发APP开发云云。在求职过程中数据结构必然也是笔试的重点，面试的常客。基于此，系统梳理复习下数据结构和算法相关知识，其实核心为链表操作，串的匹配，树的先序、中序、后序。排序的相关操作，查找相关操作，深度优先遍历、广度优先遍历、哈弗曼树、动态规划等。本节为开胃菜，数组的相关操作</p></blockquote><h2 id="1-数组动态分配思想"><a href="#1-数组动态分配思想" class="headerlink" title="1 数组动态分配思想"></a>1 数组动态分配思想</h2><p>数组是最常用的数据结构，在内存中连续存储，可以静态初始化（<code>int a[2]={1,2}</code>），可以动态初始化 <code>malloc（）</code>。难点就是数组在删除或者插入元素的时候，要移动元素的坐标不好确定。</p><p><strong>规律：</strong></p><p>1.如果要在数组中第pos个位置插入一个元素（应该从后面开始移动），此处的pos为第几位，说明pBase[0]为第一位，pos=1；</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span>cnu<span class="token punctuation">;</span>i<span class="token operator">>=</span>pos<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//cnu表示当前数组的有效个数 pos表示要插入的位置</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储指向数组的指针（结构体中的指针成员）（见下文完整程序声明）</span></code></pre><p>2.删除数组第pos位置的元素，从pos位依次往后移动一位</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnu<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//同上</span>pBase<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">=</span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>3.使用malloc动态分配内存并将返回值赋给整型指针</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> pBase<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配4*len字节长度的内存，并且以int类型的字节为一组进行划分(int *)为地址强制类型转换</span></code></pre><p>此时pBase若指向数组中的第一个元素，可以作为数组变量名称使用。</p><h2 id="2-数组的优缺点"><a href="#2-数组的优缺点" class="headerlink" title="2 数组的优缺点"></a>2 数组的优缺点</h2><p><strong>优点：</strong></p><p>存取速度快 o(1) 可以直接根据下标找到内存位置</p><p><strong>缺点：</strong></p><ol><li>事先必须知道数组的长度</li><li>插入删除元素很慢</li><li>空间通常是有限制的</li><li>需要大块连续的内存块</li><li>插入删除元素的效率很低</li></ol><h2 id="3-完整案例"><a href="#3-完整案例" class="headerlink" title="3 完整案例"></a>3 完整案例</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;malloc.h></span> </span><span class="token comment" spellcheck="true">// 包含malloc</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h></span> </span><span class="token comment" spellcheck="true">//可以使用bool和true、false输出是1或者0</span><span class="token comment" spellcheck="true">/* 定义结构体 */</span><span class="token keyword">struct</span> Arr<span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组能存取的最大元素个数</span>    <span class="token keyword">int</span> cnu<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中当前元素个数</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pBase<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储指向数组的指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*初始化数组*/</span><span class="token keyword">void</span> <span class="token function">init_Arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    pArray<span class="token operator">-></span>pBase<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配4*len字节长度的内存</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span> pArray<span class="token operator">-></span>pBase<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态分配内存失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        pArray<span class="token operator">-></span>len<span class="token operator">=</span>len<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态分配内存成功 %d \n"</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*判断数组是否为空，传地址省内存4字节，传结构体变量需要进行拷贝，12字节*/</span>bool <span class="token function">isempty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*判断数组是否满了*/</span>bool <span class="token function">isfull</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pArray<span class="token operator">-></span>len<span class="token operator">==</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*显示数组内容*/</span><span class="token keyword">void</span> <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \t\t %d \t\t %d \n"</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">,</span>pArray<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*向数组追加元素*/</span>bool <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isfull</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经满了！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>            pArray<span class="token operator">-></span>cnu<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*向数组中插入元素,pos为数组中第几个位置，pos=3就是向a[2]插入元素*/</span>bool <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>pArray<span class="token operator">-></span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入的位置输入的不合法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isfull</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经满了,插入失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//printf("数组 %d \n",pArray->cnu);</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">>=</span>pos<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//循环将pos位置开始的数组后移</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">++</span><span class="token punctuation">;</span>        pArray<span class="token operator">-></span>len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*删除数组中的第pos个元素，同时返回删除的元素的值*/</span>bool <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除失败，位置不合法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经空，删除失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token operator">*</span>val<span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*数组倒置*/</span>bool <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"倒置失败，因数组为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>pArray<span class="token operator">-></span>cnu<span class="token number">-1</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Arr arr<span class="token punctuation">;</span>    <span class="token function">init_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除了 %d\n"</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4 运行结果"></a>4 运行结果</h2><p>Success time: 0 memory: 2300 signal:0</p><pre><code>动态分配内存成功 20 1          5          20 2          5          20 3          5          20 4          5          20 5          5          20 ------------------------------------1          6          21 88          6          21 2          6          21 3          6          21 4          6          21 5          6          21 ------------------------------------88          5          21 2          5          21 3          5          21 4          5          21 5          5          21 ------------------------------------删除了 15          5          21 4          5          21 3          5          21 2          5          21 88          5          21 ------------------------------------</code></pre><h2 id="5-实例解析"><a href="#5-实例解析" class="headerlink" title="5 实例解析"></a>5 实例解析</h2><h3 id="5-1-结构体说明"><a href="#5-1-结构体说明" class="headerlink" title="5.1 结构体说明:"></a><strong>5.1 结构体说明:</strong></h3><p>结构体(struct)指的是一种数据结构，是C语言中聚合数据类型的一类。 结构体可以被声明为<u>变量</u>、<u>指针</u>或<u>数组</u>等，用以实现较复杂的数据结构。结构体的定义如下所示:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> tag <span class="token punctuation">{</span> member<span class="token operator">-</span>list <span class="token punctuation">}</span> variable<span class="token operator">-</span>list <span class="token punctuation">;</span></code></pre><p><code>struct</code>为结构体关键字，<code>tag</code>为结构体的标志，<code>member-list</code>为结构体成员列表，其必须列出其所有成员；<code>variable-list</code>为此结构体声明的变量。</p><h3 id="5-2-初始化数组："><a href="#5-2-初始化数组：" class="headerlink" title="5.2 初始化数组："></a><strong>5.2 初始化数组：</strong></h3><p><strong>思路：</strong></p><ol><li>创建初始化函数，给数组分配长度<code>malloc(sizeof(int)*len</code></li><li>指针地址为空，分配内存失败</li><li>反之，数组长度为当前内存长度，数组当前位置为0</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*初始化数组*/</span><span class="token keyword">void</span> <span class="token function">init_Arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    pArray<span class="token operator">-></span>pBase<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配4*len字节长度的内存</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span> pArray<span class="token operator">-></span>pBase<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态分配内存失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        pArray<span class="token operator">-></span>len<span class="token operator">=</span>len<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态分配内存成功 %d \n"</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-判断数组是否为空："><a href="#5-3-判断数组是否为空：" class="headerlink" title="5.3 判断数组是否为空："></a><strong>5.3 判断数组是否为空：</strong></h3><ol><li>创建判空函数，结构体参数数组</li><li>判断当前元素个数是否为空 </li></ol><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*判断数组是否为空，传地址省内存4字节，传结构体变量需要进行拷贝，12字节*/</span>bool <span class="token function">isempty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-4-判断数组是否为满："><a href="#5-4-判断数组是否为满：" class="headerlink" title="5.4 判断数组是否为满："></a><strong>5.4 判断数组是否为满：</strong></h3><ol><li>创建判满函数，结构体参数数组</li><li>判断数组长度是否为当前元素长度 </li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*判断数组是否满了*/</span>bool <span class="token function">isfull</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pArray<span class="token operator">-></span>len<span class="token operator">==</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>5.5 向数组追加元素：</strong></p><ol><li>创建追加函数，结构体数组参数，元素值</li><li>注意判满情况，反之循环输入</li><li>数组当前指针地址赋值</li><li>数组指向下一个位置，自加</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*向数组追加元素*/</span>bool <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isfull</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经满了！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-5-显示数组内容"><a href="#5-5-显示数组内容" class="headerlink" title="5.5 显示数组内容"></a><strong>5.5 显示数组内容</strong></h3><ol><li>创建显示函数，结构体数组参数</li><li>注意判空情况，反之循环输入</li><li>遍历数组输出</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*显示数组内容*/</span><span class="token keyword">void</span> <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \t\t %d \t\t %d \n"</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">,</span>pArray<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-6-向数组中插入元素"><a href="#5-6-向数组中插入元素" class="headerlink" title="5.6 向数组中插入元素"></a><strong>5.6 向数组中插入元素</strong></h3><p>pos为数组中第几个位置，<code>pos=3</code>就是向<code>a[2]</code>插入元素</p><ol><li>创建插入函数，结构体数组参数，位置参数，插入值参数</li><li>判断插入位置是否越界，判断数组是否满</li><li>循环将pos位置开始的数组后移，移动范围是从第pos个到第cnu个</li><li>循环将pos位置开始的数组后移，将值插入pos处</li><li>指向下一位且长度加1</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*向数组中插入元素,pos为数组中第几个位置，pos=3就是向a[2]插入元素*/</span>bool <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>pArray<span class="token operator">-></span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入的位置输入的不合法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isfull</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经满了,插入失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//printf("数组 %d \n",pArray->cnu);</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">>=</span>pos<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//循环将pos位置开始的数组后移</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">++</span><span class="token punctuation">;</span>        pArray<span class="token operator">-></span>len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-7-删除数组中的第pos个元素"><a href="#5-7-删除数组中的第pos个元素" class="headerlink" title="5.7 删除数组中的第pos个元素"></a><strong>5.7 删除数组中的第pos个元素</strong></h3><p>同时返回删除的元素的值</p><ol><li>创建插入函数，结构体数组参数，位置参数，插入值参数</li><li>判断插入位置是否越界合法</li><li>获取删除的元素值</li><li>移动单位是从第pos+1个到cnu</li><li>指针向前指向，自减</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*删除数组中的第pos个元素，同时返回删除的元素的值*/</span>bool <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除失败，位置不合法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经空，删除失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token operator">*</span>val<span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-8-数组倒置"><a href="#5-8-数组倒置" class="headerlink" title="5.8 数组倒置"></a><strong>5.8 数组倒置</strong></h3><ol><li>创建倒置函数，判断数组是否为空</li><li>三个变量进行交换，其中temp中间变量，ij分别指向数组首尾索引</li><li>循环数组，使前后索引交换位置</li><li>每一遍循环，ij索引分别前进一步，直到跳出循环，程序结束</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*数组倒置*/</span>bool <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"倒置失败，因数组为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>pArray<span class="token operator">-></span>cnu<span class="token number">-1</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>幸福的获得</title>
      <link href="/2018/11/01/xing-fu-de-huo-de/"/>
      <url>/2018/11/01/xing-fu-de-huo-de/</url>
      
        <content type="html"><![CDATA[<h1 id="幸福的获得"><a href="#幸福的获得" class="headerlink" title="幸福的获得"></a>幸福的获得</h1><p>​    一只兔子要比黄热病菌大得多，然而，一个拥有知识的人却会从与后者的搏斗中获得乐趣。就情感内容而言，那些受到高等教育的人所得到的快乐，与我的花匠所体验到的是完全相同的，教育所造成的差异仅在于产生这种快乐的活动形式不同而已。</p><p>​    <img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1541177098492&amp;di=727629ee4e7070a398afa9bdb4ddde19&amp;imgtype=0&amp;src=http%3A%2F%2Fp16.qhimg.com%2Fbdr%2F740__%2Fd%2F_open360%2Flove01065%2F5.jpg" alt="幸福"></p><p>​    只要生机勃勃的水流没有受阻，那么它便不会掀起小小的浪花，粗心的人则会对其蕴藏的力量视而不见。</p><p>​    机器生产的最终目的在于生成这样一种体制：机器做一切令人生厌的活儿，而人类从事变化多端和具有创造性的工资。</p><p>​    友谊与合作是一般人幸福中的基本成分，人们能更充分地在工业而不是农业劳动中得到它们。</p><p>​    出于某种原因，我们却认为它们与成人格格不入，这实在是大错特错，任何对他人不造成危害的快乐都应得到重视。</p><p>​    幸福的秘诀在于：使你的兴趣尽可能地广泛，使你对你所感兴趣的人和物做出的反应尽量倾向于友善，而不是敌视。</p><h1 id="幸福的生活"><a href="#幸福的生活" class="headerlink" title="幸福的生活"></a>幸福的生活</h1><p>​    只有外界环境不是绝对多灾多难，一个人应该能够获得幸福，他的热情和兴趣而不是向内发展。因此在教育和适应世界方面，我们都应极力避免自私自利的情欲，尽量获得那些能阻遏我们的思想永远专注我们自身的情爱和兴趣。</p><p>​    每天你至少承认一个令你痛苦的事实。你得学会去如此感受，即便你在品德上、才智上远不如你的朋友们，人生依旧值得体验。这种练习，几年后最终能使你面对事实而不畏惧，并因此将你从大范围的恐惧中解放出来。</p>]]></content>
      
      
      <categories>
          
          <category> 文学摘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幸福 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
