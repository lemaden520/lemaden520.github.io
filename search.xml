<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>C语言链表算法演示</title>
      <link href="/2018/11/03/c-yu-yan-lian-biao-suan-fa-yan-shi/"/>
      <url>/2018/11/03/c-yu-yan-lian-biao-suan-fa-yan-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言链表算法演示"><a href="#C语言链表算法演示" class="headerlink" title="C语言链表算法演示"></a>C语言链表算法演示</h1><blockquote><p><strong>摘要：</strong> <strong>链表</strong>（Linked list）是一种常见的基础数据结构，是一种<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8" target="_blank" rel="noopener">线性表</a>，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E6%A8%99_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8" target="_blank" rel="noopener">指针</a>)(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的<a href="https://zh.wikipedia.org/wiki/%E8%A4%87%E9%9B%9C%E5%BA%A6" target="_blank" rel="noopener">复杂度</a>，比另一种线性表<a href="https://zh.wikipedia.org/wiki/%E9%A1%BA%E5%BA%8F%E8%A1%A8" target="_blank" rel="noopener">顺序表</a>快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p><p>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p></blockquote><hr><h2 id="1-链表基本概念"><a href="#1-链表基本概念" class="headerlink" title="1 链表基本概念"></a>1 链表基本概念</h2><h3 id="1-1-链表定义"><a href="#1-1-链表定义" class="headerlink" title="1.1 链表定义"></a>1.1 链表定义</h3><p>​    链表是一种常见的动态进行存储分配的数据结构。</p><h3 id="1-2-链表背景"><a href="#1-2-链表背景" class="headerlink" title="1.2 链表背景"></a>1.2 链表背景</h3><h4 id="1-2-1-产生原因"><a href="#1-2-1-产生原因" class="headerlink" title="1.2.1 产生原因"></a>1.2.1 产生原因</h4><p>1.C语言中使用数组存放数据时，须先定义固定数组长度，确定元素个数。如果数据超过其容量就会发生数组溢出；为防止该溢出，往往会定义很大的数组，但这样又造成资源空间浪费。如果程序采用动态数组方法复制增长的数据，方法可行但效率太低；</p><p>2.如果在数组中需要删除一个数据或插入一个数据时，此时需要将删除或插入点数组后面的数据依次移动，这样的移动也会导致程序效率非常低。</p><h4 id="1-2-2-基础定义"><a href="#1-2-2-基础定义" class="headerlink" title="1.2.2 基础定义"></a>1.2.2 基础定义</h4><p>结点是链表的基本存储单位，在链表中所有元素都存储在一个具有相同数据结构的结点中。一个结点对应一组数据元素，每个结点在内存中使用一块连续的存储空间(一个结点可由多种数据域组成)，每个结点之间使用不连续的存储空间，结点之间通过指针链接。结点由<strong>数据域</strong>和<strong>指针域/链</strong>组成。常用定义如下:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    dadatype data<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//数据域</span>    <span class="token keyword">struct</span> node <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//指针域:指向node结点指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-3-基本构成"><a href="#1-2-3-基本构成" class="headerlink" title="1.2.3 基本构成"></a>1.2.3 基本构成</h4><p>链表一般由三部分组成：</p><p>1.表头指针：指向链表头结点的指针，头指针是链表的标志，通常用head定义头指针；</p><p>2.表头结点：链表的第一个结点，一般不保存数据信息，链表中可没有表头结点(后面讲述)，它是为方便引入结点。</p><p>3.数据结点：实际保存数据信息的结点。示意图如下：</p><p><img src="https://i.loli.net/2018/11/03/5bdd3765b96ab.png" alt="链表"></p><p>上图还给出这样一层含义，链表中的各节点在内存的存储地址不是连续的，其各节点的地址是在需要时向系统申请分配的，系统根据内存的当前情况，既可以连续分配地址，也可以跳跃式分配地址。</p><h4 id="1-2-4-链表形式"><a href="#1-2-4-链表形式" class="headerlink" title="1.2.4 链表形式"></a>1.2.4 链表形式</h4><ul><li>有表头结点的单向链表</li><li>无表头结点的单向链表</li><li>有表头的单向循环表</li><li>无表头的单向循环表</li></ul><p>其中有表头与无表头的差别在于是否有表头结点，插入删除操作对应不同的判断；单向链表与单向循环链表的区别在于最后一个数据结点指针是NULL还是指向表头结点。双向链表即两个指针分别指向前一个位置和后一个位置的链表。</p><h4 id="1-2-5-常见操作"><a href="#1-2-5-常见操作" class="headerlink" title="1.2.5 常见操作"></a>1.2.5 常见操作</h4><p>链表的常见操作包括以下五种:</p><ul><li>建立链表</li><li>遍历链表</li><li>求链表表长</li><li>插入数据</li><li>删除结点</li></ul><h3 id="1-3-预备知识"><a href="#1-3-预备知识" class="headerlink" title="1.3 预备知识"></a>1.3 预备知识</h3><h4 id="1-3-1-typedef和结构体用法"><a href="#1-3-1-typedef和结构体用法" class="headerlink" title="1.3.1 typedef和结构体用法"></a>1.3.1 typedef和结构体用法</h4><p>1.typedef基础用法</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">long</span> byte_4<span class="token punctuation">;</span> </code></pre><p>​    给已知数据类型long起个新名字，叫byte_4。 </p><p>2.typedef与结构结合使用 </p><pre class=" language-c"><code class="language-c">　<span class="token keyword">typedef</span> <span class="token keyword">struct</span> tagMyStruct 　　<span class="token punctuation">{</span> 　　        <span class="token keyword">int</span> iNum<span class="token punctuation">;</span> 　　        <span class="token keyword">long</span> lLength<span class="token punctuation">;</span> 　　<span class="token punctuation">}</span> MyStruct<span class="token punctuation">;</span> </code></pre><p>这语句实际上完成两个操作： </p><ul><li>定义一个新的结构类型 </li></ul><pre class=" language-c"><code class="language-c">　<span class="token keyword">struct</span> tagMyStruct 　　<span class="token punctuation">{</span> 　　        <span class="token keyword">int</span> iNum<span class="token punctuation">;</span> 　　        <span class="token keyword">long</span> lLength<span class="token punctuation">;</span> 　　<span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><p><code>tagMyStruct</code>称为“tag”，即“标签”，实际上是一个临时名字，<code>struct</code> 关键字和<code>tagMyStruct</code>一起，构成了这个结构类型，不论是否有<code>typedef</code>，这个结构都存在。 </p><p>　　我们可以用<code>struct tagMyStruct varName</code>来定义变量，但要注意，使用<code>tagMyStruct varName</code>来定义变量是不对的，因为<code>struct</code> 和<code>tagMyStruct</code>合在一起才能表示一个结构类型。 </p><ul><li>typedef为这个新的结构起了一个名字，叫MyStruct。 </li></ul><pre class=" language-c"><code class="language-c">　　<span class="token keyword">typedef</span> <span class="token keyword">struct</span> tagMyStruct MyStruct<span class="token punctuation">;</span> </code></pre><p>　　因此，<code>MyStruct</code>实际上相当于<code>struct tagMyStruct</code>，我们可以使用<code>MyStruct varName</code>来定义变量。<br>3.typedef规范做法： </p><pre class=" language-c"><code class="language-c">　<span class="token keyword">struct</span> tagNode 　　<span class="token punctuation">{</span> 　　        <span class="token keyword">char</span> <span class="token operator">*</span>pItem<span class="token punctuation">;</span> 　　        <span class="token keyword">struct</span> tagNode <span class="token operator">*</span>pNext<span class="token punctuation">;</span> 　　<span class="token punctuation">}</span><span class="token punctuation">;</span> 　　<span class="token keyword">typedef</span> <span class="token keyword">struct</span> tagNode <span class="token operator">*</span>pNode<span class="token punctuation">;</span> </code></pre><hr><h2 id="2-链表的优缺点"><a href="#2-链表的优缺点" class="headerlink" title="2 链表的优缺点"></a>2 链表的优缺点</h2><p>​    <strong>优点：</strong>可动态添加删除；大小可变；</p><p>​    <strong>缺点：</strong>只能通过顺次指针访问，查询效率低。</p><p>补充：</p><p>​    顺序表的优点：查找方便,适合随机查找 ：</p><p>​    顺序表的缺点：插入、删除操作不方便，因为插入、删除操作会导致大量元素的移动。</p><p>​    链接表的优点：插入、删除操作方便，不会导致元素的移动，因为元素增减，只需要调整指针。 </p><p>​    顺序表的缺点：查找方便，不适合随机查找。</p><!--链表的特性是在中间任意位置添加删除元素的都非常的快，不需要移动其它的元素。链表顾名思义，要把各个元素链接起来才算撒。通常链表每一个元素都要保存一个指向下一个元素的指针（单链表）。双链表每个元素即要保存到下一个元素的指针，还要保存一个上一个元素的指针。循环链表则把最后一个元素中保存下一个元素指针指向第一个元素。数组是一组具有相同类型和名称的变量的集(百度)合。这些变量称为数组的元素,每个数组元素都有一个编号,这个编号叫做下标,我们可以通过下标来区别这些元素。数组元素的个数有时也称之为数组的长度。--><hr><h2 id="3-案例分析"><a href="#3-案例分析" class="headerlink" title="3 案例分析"></a>3 案例分析</h2><h3 id="3-1-单链表的建立"><a href="#3-1-单链表的建立" class="headerlink" title="3.1 单链表的建立"></a>3.1 单链表的建立</h3><p><strong>例：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> list_node<span class="token punctuation">{</span>　    <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据域，用于存储数据</span>　    <span class="token keyword">struct</span> list_node <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指针域，指针，可以用来访问节点数据，也可以遍历，指向下一个节点</span><span class="token punctuation">}</span>list_single<span class="token punctuation">;</span></code></pre><p>在链表节点的定义中，除一个整型成员外，成员next是指向与节点类型完全相同的指针。</p><p>在链表节点的数据结构中，非常特殊的一点就是结构体内的指针域的数据类型使用了未定义成功的数据类型。这是在C中唯一规定可以先使用后定义的数据结构。</p><p>定义好了链表的结构之后，只要在程序运行的时候数据域中存储适当的数据，如有后继结点，则把链域指向其直接后继，若没有，则置为<code>NULL</code>。</p><h3 id="3-2-链表的创建、输出步骤"><a href="#3-2-链表的创建、输出步骤" class="headerlink" title="3.2 链表的创建、输出步骤"></a>3.2 链表的创建、输出步骤</h3><p>单链表的创建过程有以下几步：</p><ol><li>定义链表的数据结构;</li><li>创建一个空表;</li><li>利用<code>malloc ( )</code>函数向系统申请分配一个节点;</li><li>将新节点的指针成员赋值为空。若是空表，将新节点连接到表头(NULL)；若是非空表，将新节点接到表尾;</li><li>判断一下是否有后续节点要接入链表，若有转到3，否则结束;</li></ol><p>将上面的创建过程用函数来实现如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> list <span class="token operator">*</span><span class="token function">create_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">;</span>如何创建单链表的节点，主要分以下步骤<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>给当前的每个节点的数据结构配置定量的空间大小   ep <span class="token punctuation">:</span> <span class="token keyword">struct</span> list <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>清节点数据<span class="token punctuation">(</span>由于结构体变量在未初始化的时候，数据是脏的<span class="token punctuation">)</span>   ep <span class="token punctuation">:</span> <span class="token function">memset</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>给节点初始化数据   ep <span class="token punctuation">:</span> node<span class="token operator">-></span>id <span class="token operator">=</span> data <span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>将该节点的指针域设置为<span class="token constant">NULL</span>   ep <span class="token punctuation">:</span> node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span></code></pre><p>单链表的输出过程有以下几步（函数实现略，读者可自己尝试编写）:</p><ol><li>找到表头;</li><li>若是非空表，输出节点的值成员(数据成员)，是空表则退出;</li><li>跟踪链表的增长，即找到下一个节点的地址;</li><li>转到2.</li></ol><p><strong>例：</strong></p><p>1.创建一个链表中的一个节点，为了好看，我们把创建节点封装成函数，以后想创建多少个节点，我们就可以反复调用一个函数来创建：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//创建一个链表中的一个节点</span>list_single <span class="token operator">*</span><span class="token function">create_list_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    list_single <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2、首先，当然是定义一个头指针 、第一步定义数据结构见上</span>    node <span class="token operator">=</span> <span class="token punctuation">(</span>list_single <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list_single<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3、然后分配内存空间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc fair!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若为空，分配失败</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list_single<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4、清一下，注意要包含string头文件。将list_single中的成员全都初始化为0</span>    node<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5、给链表节点的数据赋值</span>    node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//6、链表的指针域指向空</span>    <span class="token keyword">return</span> node <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.链表的输出就很简单了，大致可以如下使用</p><pre class=" language-c"><code class="language-c">list_single <span class="token operator">*</span>node_ptr <span class="token operator">=</span> <span class="token function">create_list_node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个节点</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"node_ptr->data=%d\n"</span><span class="token punctuation">,</span>node_ptr<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打印节点里的数据</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"node_ptr->next=%d\n"</span><span class="token punctuation">,</span>node_ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>3.整个程序如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> </span><span class="token comment" spellcheck="true">//包含malloc函数</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span> </span><span class="token comment" spellcheck="true">//包含memset函数</span><span class="token keyword">struct</span>  list_node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data <span class="token punctuation">;</span>     <span class="token keyword">struct</span> list_node <span class="token operator">*</span>next <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> list_node list_single <span class="token punctuation">;</span>     list_single <span class="token operator">*</span><span class="token function">create_list_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    list_single <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>    node <span class="token operator">=</span> <span class="token punctuation">(</span>list_single <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list_single<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc fair!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list_single<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>    <span class="token keyword">return</span> node <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span>    list_single <span class="token operator">*</span>node_ptr <span class="token operator">=</span> <span class="token function">create_list_node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个节点</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"node_ptr->data=%d\n"</span><span class="token punctuation">,</span>node_ptr<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打印节点里的数据</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"node_ptr->next=%d\n"</span><span class="token punctuation">,</span>node_ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">free</span><span class="token punctuation">(</span>node_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意只能释放一次</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-单链表的尾插"><a href="#3-3-单链表的尾插" class="headerlink" title="3.3 单链表的尾插"></a>3.3 单链表的尾插</h3><p>由上面的描述我们可以得到单链表的模型如下图：</p><p><img src="https://i.loli.net/2018/11/03/5bdd4c4685315.png" alt="链表2"></p><p>只要实现：</p><pre class=" language-c"><code class="language-c">header<span class="token operator">-></span>next <span class="token operator">=</span> new </code></pre><p><img src="https://i.loli.net/2018/11/03/5bdd4ff05bce6.png" alt="链表三"></p><p>双向链表尾插节点的函数可以定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">double_list_tail_insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> double_list <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token keyword">struct</span> double_list <span class="token operator">*</span>new<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><p><strong>尾插的步骤：</strong></p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>获取当前节点的位置，也就是访问头节点   ep <span class="token punctuation">:</span>    <span class="token keyword">struct</span> list <span class="token operator">*</span>p <span class="token operator">=</span> header <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>判断是否为最后一个节点，如果不是，移动到下一个节点，如果是，将数据插入尾部。   ep <span class="token punctuation">:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> new <span class="token punctuation">;</span></code></pre><h3 id="3-4-单链表的头插"><a href="#3-4-单链表的头插" class="headerlink" title="3.4 单链表的头插"></a>3.4 单链表的头插</h3><p><img src="https://i.loli.net/2018/11/03/5bdd55499bbb0.png" alt="链表四"></p><p>很好理解，头插就是把新的节点插在原来的节点和原来节点的下一个节点之间的一个节点。如图，新的节点插在头节点和节点1。<br>所以可以推出头插流程如下：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>获取当前节点的位置，也就是访问头节点    ep <span class="token punctuation">:</span> <span class="token keyword">struct</span> list <span class="token operator">*</span>p <span class="token operator">=</span> header <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>新的节点的下一个节点设置为原来头节点的下一个节点<span class="token punctuation">(</span>第一个节点<span class="token punctuation">)</span>    ep <span class="token punctuation">:</span> new<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>原来的头节点的下一个节点设置为现在新插入的头节点    ep <span class="token punctuation">:</span> p<span class="token operator">-></span>next <span class="token operator">=</span> new <span class="token punctuation">;</span></code></pre><h3 id="3-5-单链表的遍历"><a href="#3-5-单链表的遍历" class="headerlink" title="3.5 单链表的遍历"></a>3.5 单链表的遍历</h3><p>如图为一条单向链表的模型，看图知道该链表由头节点和若干个节点组成，最后一个节点(尾节点)为<code>NULL</code> 。</p><p>遍历节点函数原型可定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Print_nod</span><span class="token punctuation">(</span><span class="token keyword">struct</span> list <span class="token operator">*</span> pH<span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2018/11/03/5bdd5703000d3.png" alt="链表五"></p><p>从图中可以得出信息，如果我们要打印出各个节点的数据，要考虑以下问题：</p><ul><li>需要打印头节点吗？(头节点肯定是不用打印的，因为这是我们为了操作方便而设置的一个节点)。</li><li>这条链表有多少个节点我们怎么知道？(通过判断该链表是否已经到达了尾节点，标志就是<code>NULL</code>)</li></ul><p>那么可以得到流程如下：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>获取当前节点的位置，也就是访问头节点    ep <span class="token punctuation">:</span> <span class="token keyword">struct</span> list <span class="token operator">*</span>p <span class="token operator">=</span> header <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>由于头节点我们不需要去打印它，这时候，初始化打印的节点需要从第一个节点开始。    ep <span class="token punctuation">:</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>判断是否为最后一个节点，如果不是，先打印第一个节点的数据<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>，然后移动到下一个节点<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>重复这两个步骤。   如果是最后一个节点，直接打印数据即可。    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"node:%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token punctuation">;</span>          p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"node:%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   当然还可以一句代码解决，这样就达到了先偏移，后取数据。    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">{</span> p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>                              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"node:%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="3-6-单链表的删除"><a href="#3-6-单链表的删除" class="headerlink" title="3.6 单链表的删除"></a>3.6 单链表的删除</h3><p>删除节点的函数原型可定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">detele_list_node</span><span class="token punctuation">(</span><span class="token keyword">struct</span> list <span class="token operator">*</span>pH <span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>单向链表的删除要考虑两种情况，<u>一种是普通节点的删除</u>(当然，头节点不能算)<br>还有<u>一种是尾节点的前一个节点的删除情况</u>，<strong>注意</strong>，删除完节点还需要释放对应节点的内存空间。</p><p><img src="https://i.loli.net/2018/11/03/5bdd5afecc995.png" alt="链表六"></p><p><strong>例：</strong>普通节点的删除</p><p>定义两个数据结构：prev为当前节点的上一个节点，p表示当前节点。</p><p>如果找到数据是节点一的数据，将节点一的数据指向节点一的下一个节点，然后释放节点一的内存空间，这样就需要有一个指针来保存节点一的前一个节点。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>id <span class="token operator">==</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>​    prev<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>​    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>例：</strong>考虑尾节点的下一个节点为NULL的节点删除</p><p><img src="https://i.loli.net/2018/11/03/5bdd60f20915a.png" alt="链表七"></p><p>定义两个数据结构：prev为当前节点的上一个节点，p表示当前节点。如果找到数据是节点三的数据，将节点三的上一个节点指向NULL，然后释放节点三的内存空间。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>id <span class="token operator">==</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    ​    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ​    prev<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>​    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>删除节点的设计流程：</p><p>(1)先定义两个指针，一个表示当前的节点，另一个表示当前节点的上一个节点。</p><pre class=" language-c"><code class="language-c">ep <span class="token punctuation">:</span> <span class="token keyword">struct</span> list <span class="token operator">*</span>p <span class="token operator">=</span> header <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前节点</span>     <span class="token keyword">struct</span> list <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前节点的上一个节点</span></code></pre><p>(2)遍历整个链表，同时保存当前节点的前一个节点</p><pre class=" language-c"><code class="language-c">ep <span class="token punctuation">:</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//保存了当前的节点的前一个节点</span>          prev <span class="token operator">=</span> p <span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//保存当前偏移的节点</span>          p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>(3)在遍历的过程中查找要删除的数据</p><pre class=" language-c"><code class="language-c">ep <span class="token punctuation">:</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>​        <span class="token punctuation">{</span> ​          <span class="token comment" spellcheck="true">//保存了当前的节点的前一个节点</span>​          prev <span class="token operator">=</span> p <span class="token punctuation">;</span>  ​          <span class="token comment" spellcheck="true">//保存当前偏移的节点</span>​          p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span> ​          <span class="token comment" spellcheck="true">//查找到了数据</span>​          <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>id <span class="token operator">==</span> data<span class="token punctuation">)</span>​          <span class="token punctuation">{</span>          <span class="token punctuation">}</span>​      <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>​        <span class="token punctuation">}</span></code></pre><p>(4)查找到了数据后，分两种情况删除</p><pre class=" language-c"><code class="language-c">ep <span class="token punctuation">:</span> 普通节点的删除​        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>id <span class="token operator">==</span> data<span class="token punctuation">)</span>​        <span class="token punctuation">{</span>​            prev<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>​            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>​        <span class="token punctuation">}</span>ep <span class="token punctuation">:</span> 考虑尾节点的下一个节点为<span class="token constant">NULL</span>的节点删除​        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>id <span class="token operator">==</span> data<span class="token punctuation">)</span>​        <span class="token punctuation">{</span>​            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>​            <span class="token punctuation">{</span>​                prev<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>​                <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>​            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="3-7-单链表的逆序"><a href="#3-7-单链表的逆序" class="headerlink" title="3.7 单链表的逆序"></a>3.7 单链表的逆序</h3><p>逆序操作的函数原型可定义如下：</p><p><img src="https://s1.ax1x.com/2018/11/03/i4b8L8.png" alt="链表八"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">trave_list</span><span class="token punctuation">(</span>L <span class="token operator">*</span> pH<span class="token punctuation">)</span></code></pre><p><strong>逆序步骤：</strong></p><p>(1)设置两个指针，一个保存当前的第一个节点的位置，一个表示链表的第一个有效节点</p><pre class=" language-c"><code class="language-c">ep<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//保存当前第一个节点的位置</span><span class="token keyword">struct</span> list <span class="token operator">*</span> p  <span class="token operator">=</span> pH<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示链表的第一个有效节点</span><span class="token keyword">struct</span> list <span class="token operator">*</span> pBack<span class="token punctuation">;</span> </code></pre><p>(2)当链表没有有效节点或者只有一个有效节点的时候，不做任何操作。</p><p><img src="https://s1.ax1x.com/2018/11/03/i4brLT.png" alt="链表九"></p><pre class=" language-c"><code class="language-c">ep<span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>也就是上面的这种情况    <span class="token keyword">return</span><span class="token punctuation">;</span></code></pre><p>(3)遍历链表</p><p>1).保存第一个节点的下一个节点的地址</p><pre class=" language-c"><code class="language-c">ep<span class="token punctuation">:</span>pBack <span class="token operator">=</span> p_<span class="token operator">></span>next<span class="token punctuation">;</span></code></pre><p>2).对第一个有效节点做特殊处理，也就是把第一个有效节点放到末尾。</p><pre class=" language-c"><code class="language-c">ep<span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> pH<span class="token operator">-></span>next<span class="token punctuation">)</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></code></pre><p>3).如果不是第一个有效节点，则进行头插操作，把当前的节点当做一个新的节点：</p><p><img src="https://s1.ax1x.com/2018/11/03/i4q90S.png" alt="链表十"></p><pre class=" language-c"><code class="language-c">ep<span class="token punctuation">:</span>p<span class="token operator">-></span>next <span class="token operator">=</span> pH<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾部连接</span>pH<span class="token operator">-></span>NEXT <span class="token operator">=</span> P<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//头部连接 </span></code></pre><p>4).继续走下一个节点</p><pre class=" language-c"><code class="language-c">p <span class="token operator">=</span> pBack<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//走下一个节点</span></code></pre><p>(4)手动插入最后一个节点</p><pre class=" language-c"><code class="language-c"><span class="token function">top_insert</span><span class="token punctuation">(</span>pH<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入最后一个节点</span></code></pre><p>流程咱们基本搞懂了，下面写一个程序，这将会变得非常非常的简单。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> slist<span class="token punctuation">{</span>    <span class="token keyword">int</span> id <span class="token punctuation">;</span>    <span class="token keyword">struct</span> slist <span class="token operator">*</span>next <span class="token punctuation">;</span>            <span class="token punctuation">}</span>L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个节点 </span>L <span class="token operator">*</span><span class="token function">create_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//给每个节点分配结构体一样的空间大小 </span>    L <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//由于结构体在未初始化的时候一样是脏数据，所以要清 </span>    <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化第一个节点 </span>    p<span class="token operator">-></span>id <span class="token operator">=</span> data <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将节点的后继指针设置为NULL </span>    p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//链表的尾插 </span><span class="token keyword">void</span> <span class="token function">tail_insert</span><span class="token punctuation">(</span>L <span class="token operator">*</span>pH <span class="token punctuation">,</span> L <span class="token operator">*</span>new<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前的位置 </span>    L <span class="token operator">*</span>p <span class="token operator">=</span> pH <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//如果当前位置的下一个节点不为空 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//移动到下一个节点 </span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果跳出以上循环，所以已经到了NULL的这个位置</span>    <span class="token comment" spellcheck="true">//此时直接把新插入的节点赋值给NULL这个位置 </span>    p<span class="token operator">-></span>next <span class="token operator">=</span> new <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//链表的头插 </span><span class="token keyword">void</span> <span class="token function">top_insert</span><span class="token punctuation">(</span>L <span class="token operator">*</span>pH <span class="token punctuation">,</span> L <span class="token operator">*</span>new<span class="token punctuation">)</span><span class="token punctuation">{</span>    L <span class="token operator">*</span>p <span class="token operator">=</span> pH <span class="token punctuation">;</span>    new<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> new <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//链表的遍历 </span><span class="token keyword">void</span> <span class="token function">Print_node</span><span class="token punctuation">(</span>L <span class="token operator">*</span>pH<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前的位置 </span>    L <span class="token operator">*</span>p <span class="token operator">=</span> pH <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取第一个节点的位置 </span>    p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果当前位置的下一个节点不为空 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//(1)打印节点的数据 </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id:%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(2)移动到下一个节点,如果条件仍为真，则重复(1)，再(2) </span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果当前位置的下一个节点为空，则打印数据</span>    <span class="token comment" spellcheck="true">//说明只有一个节点 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id:%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除链表中的节点 </span><span class="token keyword">int</span> <span class="token function">detele_list_node</span><span class="token punctuation">(</span>L <span class="token operator">*</span> pH <span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取当前头节点的位置 </span>    L <span class="token operator">*</span>p <span class="token operator">=</span> pH <span class="token punctuation">;</span>    L <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存当前节点的前一个节点的指针 </span>        prev <span class="token operator">=</span> p <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//然后让当前的指针继续往后移动 </span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//判断，找到了要删除的数据  </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>id <span class="token operator">==</span> data<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//两种情况，一种是普通节点，还有一种是尾节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//普通节点的情况 </span>            <span class="token punctuation">{</span>                prev<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>                <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//尾节点的情况 </span>            <span class="token punctuation">{</span>                prev<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将这个尾节点的上一个节点的指针域指向空 </span>                <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有要删除的节点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">trave_list</span><span class="token punctuation">(</span>L <span class="token operator">*</span> pH<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保存第一个节点的位置 </span>    L <span class="token operator">*</span>p <span class="token operator">=</span> pH<span class="token operator">-></span>next<span class="token punctuation">;</span>    L <span class="token operator">*</span>pBack<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//遍历链表 </span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存第一个节点的下一个节点 </span>        pBack <span class="token operator">=</span> p<span class="token operator">-></span>next <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//找到第一个有效节点,其实就是头指针的下一个节点 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> pH<span class="token operator">-></span>next<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第一个有效节点就是最后一个节点，所以要指向NULL </span>            p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*            new->next = p->next ;            p->next = new ;            */</span>            p<span class="token operator">-></span>next <span class="token operator">=</span> pH<span class="token operator">-></span>next <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾部连接 </span>        <span class="token punctuation">}</span>        pH<span class="token operator">-></span>next <span class="token operator">=</span> p <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头部连接 </span>        p <span class="token operator">=</span> pBack <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//走下一个节点 </span>    <span class="token punctuation">}</span>    <span class="token function">top_insert</span><span class="token punctuation">(</span>pH<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入最后一个节点 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建第一个节点 </span>    <span class="token keyword">int</span> i <span class="token punctuation">;</span>    L <span class="token operator">*</span>header <span class="token operator">=</span> <span class="token function">create_node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">tail_insert</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span><span class="token function">create_node</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Print_node</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">detele_list_node</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print_node</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trave_list</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print_node</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言动态数组分配算法演示</title>
      <link href="/2018/11/03/c-dong-tai-nei-cun-fen-pei/"/>
      <url>/2018/11/03/c-dong-tai-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<h1 id="C动态数组算法演示"><a href="#C动态数组算法演示" class="headerlink" title="C动态数组算法演示"></a>C动态数组算法演示</h1><blockquote><p><strong>摘要：</strong>数据结构和算法对于编程的意义不言而喻，具有指导意义的。无论从事算法优化方向研究，还是大数据处理，亦或者网站开发APP开发云云。在求职过程中数据结构必然也是笔试的重点，面试的常客。基于此，系统梳理复习下数据结构和算法相关知识，其实核心为链表操作，串的匹配，树的先序、中序、后序。排序的相关操作，查找相关操作，深度优先遍历、广度优先遍历、哈弗曼树、动态规划等。本节为开胃菜，数组的相关操作</p></blockquote><h2 id="1-数组动态分配思想"><a href="#1-数组动态分配思想" class="headerlink" title="1 数组动态分配思想"></a>1 数组动态分配思想</h2><p>数组是最常用的数据结构，在内存中连续存储，可以静态初始化（<code>int a[2]={1,2}</code>），可以动态初始化 <code>malloc（）</code>。难点就是数组在删除或者插入元素的时候，要移动元素的坐标不好确定。</p><p><strong>规律：</strong></p><p>1.如果要在数组中第pos个位置插入一个元素（应该从后面开始移动），此处的pos为第几位，说明pBase[0]为第一位，pos=1；</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span>cnu<span class="token punctuation">;</span>i<span class="token operator">>=</span>pos<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//cnu表示当前数组的有效个数 pos表示要插入的位置</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储指向数组的指针（结构体中的指针成员）（见下文完整程序声明）</span></code></pre><p>2.删除数组第pos位置的元素，从pos位依次往后移动一位</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnu<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//同上</span>pBase<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">=</span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>3.使用malloc动态分配内存并将返回值赋给整型指针</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> pBase<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配4*len字节长度的内存，并且以int类型的字节为一组进行划分(int *)为地址强制类型转换</span></code></pre><p>此时pBase若指向数组中的第一个元素，可以作为数组变量名称使用。</p><h2 id="2-数组的优缺点"><a href="#2-数组的优缺点" class="headerlink" title="2 数组的优缺点"></a>2 数组的优缺点</h2><p><strong>优点：</strong></p><p>存取速度快 o(1) 可以直接根据下标找到内存位置</p><p><strong>缺点：</strong></p><ol><li>事先必须知道数组的长度</li><li>插入删除元素很慢</li><li>空间通常是有限制的</li><li>需要大块连续的内存块</li><li>插入删除元素的效率很低</li></ol><h2 id="3-完整案例"><a href="#3-完整案例" class="headerlink" title="3 完整案例"></a>3 完整案例</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;malloc.h></span> </span><span class="token comment" spellcheck="true">// 包含malloc</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h></span> </span><span class="token comment" spellcheck="true">//可以使用bool和true、false输出是1或者0</span><span class="token comment" spellcheck="true">/* 定义结构体 */</span><span class="token keyword">struct</span> Arr<span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组能存取的最大元素个数</span>    <span class="token keyword">int</span> cnu<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中当前元素个数</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pBase<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储指向数组的指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*初始化数组*/</span><span class="token keyword">void</span> <span class="token function">init_Arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    pArray<span class="token operator">-></span>pBase<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配4*len字节长度的内存</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span> pArray<span class="token operator">-></span>pBase<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态分配内存失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        pArray<span class="token operator">-></span>len<span class="token operator">=</span>len<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态分配内存成功 %d \n"</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*判断数组是否为空，传地址省内存4字节，传结构体变量需要进行拷贝，12字节*/</span>bool <span class="token function">isempty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*判断数组是否满了*/</span>bool <span class="token function">isfull</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pArray<span class="token operator">-></span>len<span class="token operator">==</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*显示数组内容*/</span><span class="token keyword">void</span> <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \t\t %d \t\t %d \n"</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">,</span>pArray<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*向数组追加元素*/</span>bool <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isfull</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经满了！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>            pArray<span class="token operator">-></span>cnu<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*向数组中插入元素,pos为数组中第几个位置，pos=3就是向a[2]插入元素*/</span>bool <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>pArray<span class="token operator">-></span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入的位置输入的不合法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isfull</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经满了,插入失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//printf("数组 %d \n",pArray->cnu);</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">>=</span>pos<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//循环将pos位置开始的数组后移</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">++</span><span class="token punctuation">;</span>        pArray<span class="token operator">-></span>len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*删除数组中的第pos个元素，同时返回删除的元素的值*/</span>bool <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除失败，位置不合法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经空，删除失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token operator">*</span>val<span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*数组倒置*/</span>bool <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"倒置失败，因数组为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>pArray<span class="token operator">-></span>cnu<span class="token number">-1</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Arr arr<span class="token punctuation">;</span>    <span class="token function">init_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除了 %d\n"</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4 运行结果"></a>4 运行结果</h2><p>Success time: 0 memory: 2300 signal:0</p><pre><code>动态分配内存成功 20 1          5          20 2          5          20 3          5          20 4          5          20 5          5          20 ------------------------------------1          6          21 88          6          21 2          6          21 3          6          21 4          6          21 5          6          21 ------------------------------------88          5          21 2          5          21 3          5          21 4          5          21 5          5          21 ------------------------------------删除了 15          5          21 4          5          21 3          5          21 2          5          21 88          5          21 ------------------------------------</code></pre><h2 id="5-实例解析"><a href="#5-实例解析" class="headerlink" title="5 实例解析"></a>5 实例解析</h2><h3 id="5-1-结构体说明"><a href="#5-1-结构体说明" class="headerlink" title="5.1 结构体说明:"></a><strong>5.1 结构体说明:</strong></h3><p>结构体(struct)指的是一种数据结构，是C语言中聚合数据类型的一类。 结构体可以被声明为<u>变量</u>、<u>指针</u>或<u>数组</u>等，用以实现较复杂的数据结构。结构体的定义如下所示:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> tag <span class="token punctuation">{</span> member<span class="token operator">-</span>list <span class="token punctuation">}</span> variable<span class="token operator">-</span>list <span class="token punctuation">;</span></code></pre><p><code>struct</code>为结构体关键字，<code>tag</code>为结构体的标志，<code>member-list</code>为结构体成员列表，其必须列出其所有成员；<code>variable-list</code>为此结构体声明的变量。</p><h3 id="5-2-初始化数组："><a href="#5-2-初始化数组：" class="headerlink" title="5.2 初始化数组："></a><strong>5.2 初始化数组：</strong></h3><p><strong>思路：</strong></p><ol><li>创建初始化函数，给数组分配长度<code>malloc(sizeof(int)*len</code></li><li>指针地址为空，分配内存失败</li><li>反之，数组长度为当前内存长度，数组当前位置为0</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*初始化数组*/</span><span class="token keyword">void</span> <span class="token function">init_Arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    pArray<span class="token operator">-></span>pBase<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配4*len字节长度的内存</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span> pArray<span class="token operator">-></span>pBase<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态分配内存失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        pArray<span class="token operator">-></span>len<span class="token operator">=</span>len<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态分配内存成功 %d \n"</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-3-判断数组是否为空："><a href="#5-3-判断数组是否为空：" class="headerlink" title="5.3 判断数组是否为空："></a><strong>5.3 判断数组是否为空：</strong></h3><ol><li>创建判空函数，结构体参数数组</li><li>判断当前元素个数是否为空 </li></ol><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*判断数组是否为空，传地址省内存4字节，传结构体变量需要进行拷贝，12字节*/</span>bool <span class="token function">isempty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-4-判断数组是否为满："><a href="#5-4-判断数组是否为满：" class="headerlink" title="5.4 判断数组是否为满："></a><strong>5.4 判断数组是否为满：</strong></h3><ol><li>创建判满函数，结构体参数数组</li><li>判断数组长度是否为当前元素长度 </li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*判断数组是否满了*/</span>bool <span class="token function">isfull</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pArray<span class="token operator">-></span>len<span class="token operator">==</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>5.5 向数组追加元素：</strong></p><ol><li>创建追加函数，结构体数组参数，元素值</li><li>注意判满情况，反之循环输入</li><li>数组当前指针地址赋值</li><li>数组指向下一个位置，自加</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*向数组追加元素*/</span>bool <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isfull</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经满了！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-5-显示数组内容"><a href="#5-5-显示数组内容" class="headerlink" title="5.5 显示数组内容"></a><strong>5.5 显示数组内容</strong></h3><ol><li>创建显示函数，结构体数组参数</li><li>注意判空情况，反之循环输入</li><li>遍历数组输出</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*显示数组内容*/</span><span class="token keyword">void</span> <span class="token function">show_Arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \t\t %d \t\t %d \n"</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">,</span>pArray<span class="token operator">-></span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-6-向数组中插入元素"><a href="#5-6-向数组中插入元素" class="headerlink" title="5.6 向数组中插入元素"></a><strong>5.6 向数组中插入元素</strong></h3><p>pos为数组中第几个位置，<code>pos=3</code>就是向<code>a[2]</code>插入元素</p><ol><li>创建插入函数，结构体数组参数，位置参数，插入值参数</li><li>判断插入位置是否越界，判断数组是否满</li><li>循环将pos位置开始的数组后移，移动范围是从第pos个到第cnu个</li><li>循环将pos位置开始的数组后移，将值插入pos处</li><li>指向下一位且长度加1</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*向数组中插入元素,pos为数组中第几个位置，pos=3就是向a[2]插入元素*/</span>bool <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>pArray<span class="token operator">-></span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入的位置输入的不合法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isfull</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经满了,插入失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//printf("数组 %d \n",pArray->cnu);</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">>=</span>pos<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//循环将pos位置开始的数组后移</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">++</span><span class="token punctuation">;</span>        pArray<span class="token operator">-></span>len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-7-删除数组中的第pos个元素"><a href="#5-7-删除数组中的第pos个元素" class="headerlink" title="5.7 删除数组中的第pos个元素"></a><strong>5.7 删除数组中的第pos个元素</strong></h3><p>同时返回删除的元素的值</p><ol><li>创建插入函数，结构体数组参数，位置参数，插入值参数</li><li>判断插入位置是否越界合法</li><li>获取删除的元素值</li><li>移动单位是从第pos+1个到cnu</li><li>指针向前指向，自减</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*删除数组中的第pos个元素，同时返回删除的元素的值*/</span>bool <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">></span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除失败，位置不合法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组已经空，删除失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token operator">*</span>val<span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>pArray<span class="token operator">-></span>cnu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pArray<span class="token operator">-></span>cnu<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-8-数组倒置"><a href="#5-8-数组倒置" class="headerlink" title="5.8 数组倒置"></a><strong>5.8 数组倒置</strong></h3><ol><li>创建倒置函数，判断数组是否为空</li><li>三个变量进行交换，其中temp中间变量，ij分别指向数组首尾索引</li><li>循环数组，使前后索引交换位置</li><li>每一遍循环，ij索引分别前进一步，直到跳出循环，程序结束</li></ol><p><strong>例如：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*数组倒置*/</span>bool <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Arr <span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isempty</span><span class="token punctuation">(</span>pArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"倒置失败，因数组为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>pArray<span class="token operator">-></span>cnu<span class="token number">-1</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            pArray<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>幸福的获得</title>
      <link href="/2018/11/01/xing-fu-de-huo-de/"/>
      <url>/2018/11/01/xing-fu-de-huo-de/</url>
      
        <content type="html"><![CDATA[<h1 id="幸福的获得"><a href="#幸福的获得" class="headerlink" title="幸福的获得"></a>幸福的获得</h1><p>​    一只兔子要比黄热病菌大得多，然而，一个拥有知识的人却会从与后者的搏斗中获得乐趣。就情感内容而言，那些受到高等教育的人所得到的快乐，与我的花匠所体验到的是完全相同的，教育所造成的差异仅在于产生这种快乐的活动形式不同而已。</p><p>​    <img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1541177098492&amp;di=727629ee4e7070a398afa9bdb4ddde19&amp;imgtype=0&amp;src=http%3A%2F%2Fp16.qhimg.com%2Fbdr%2F740__%2Fd%2F_open360%2Flove01065%2F5.jpg" alt="幸福"></p><p>​    只要生机勃勃的水流没有受阻，那么它便不会掀起小小的浪花，粗心的人则会对其蕴藏的力量视而不见。</p><p>​    机器生产的最终目的在于生成这样一种体制：机器做一切令人生厌的活儿，而人类从事变化多端和具有创造性的工资。</p><p>​    友谊与合作是一般人幸福中的基本成分，人们能更充分地在工业而不是农业劳动中得到它们。</p><p>​    出于某种原因，我们却认为它们与成人格格不入，这实在是大错特错，任何对他人不造成危害的快乐都应得到重视。</p><p>​    幸福的秘诀在于：使你的兴趣尽可能地广泛，使你对你所感兴趣的人和物做出的反应尽量倾向于友善，而不是敌视。</p><h1 id="幸福的生活"><a href="#幸福的生活" class="headerlink" title="幸福的生活"></a>幸福的生活</h1><p>​    只有外界环境不是绝对多灾多难，一个人应该能够获得幸福，他的热情和兴趣而不是向内发展。因此在教育和适应世界方面，我们都应极力避免自私自利的情欲，尽量获得那些能阻遏我们的思想永远专注我们自身的情爱和兴趣。</p><p>​    每天你至少承认一个令你痛苦的事实。你得学会去如此感受，即便你在品德上、才智上远不如你的朋友们，人生依旧值得体验。这种练习，几年后最终能使你面对事实而不畏惧，并因此将你从大范围的恐惧中解放出来。</p>]]></content>
      
      
      <categories>
          
          <category> 文学摘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幸福 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
